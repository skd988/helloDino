class Draw{
    function void drawBlock(int locationBlock, Array block)
    {
        var int memAddress;
        var int row;
        let memAddress = 16384 + locationBlock;
        let row = 0;
        while(row < 16)
        {
            do Memory.poke(memAddress + (32 * row), block[row]);
            let row = row + 1;
        }
        return;
    }

    function void drawBlocks(int memAddress, Array blocks, int startCol, int height, int width)
    {
        var int row;
        var int col;
        var int currAddress;
        var Array arrRow;

        let row = 0;
        while(row < height)
        {
            let col = startCol;
            let arrRow = blocks[row];
            while(col < width)
            { 
                do Draw.drawBlock(memAddress + (row * 512) + col, arrRow[col]);

                let col = col + 1;
            }
            let row = row + 1;
        }
        return;
    }

    function void shiftBlockRight(Array block)
    {
        var int row;
        let row = 0;
        while(row < 16)
        {
            let block[row] =  LogicPlus.shiftRight(block[row]);
            let row = row + 1;
        }
        return;
    }

    function void moveBlockPixelLeft(Array block, Array nextBlock)
    {
        var int row;
        var int addedBit;
        let row = 0;
        while(row < 16)
        {
            let block[row] = LogicPlus.shiftRight(block[row]);
            let addedBit = ((nextBlock[row] & 1) > 0) & (-32767 - 1);
            let block[row] = block[row] | addedBit;
            let row = row + 1;
        }
        return;
    }
    
    function void moveBlocksPixelLeft(Array blocks, int height, int width)
    {
        var int row;
        var int col;
        var Array blockRow;
        let row = 0;
        while(row < height)
        {
            let blockRow = blocks[row];
            let col = 0;
            while(col < (width - 1))
            {
                do Draw.moveBlockPixelLeft(blockRow[col], blockRow[col+1]);
                let col = col + 1;
            }
            do Draw.shiftBlockRight(blockRow[col]);
            let row = row + 1;
        }
        return;
    }

    function void shiftBlocksRightCircular(Array arr, int height, int width)
    {
        var int row;
        var int col;
        var Array arrRow;
        var Array rightMost;
        let row = 0;
        while(row < height)
        {
            let arrRow = arr[row];
            let rightMost = arrRow[width - 1];
            let col = width;
            while(col > 0)
            {
                let arrRow[col] = arrRow[col - 1];
                let col = col - 1;
            }
            let arrRow[0] = rightMost;
            let row = row + 1;
        }
        return;
    }

    function int getBlockOfLocation(int location)
    {
		var int blockRowLocation;
		var int blockCol;
		var int distanceFromRowBlockBeginning;

        //finds the row by checking how many rows the block is from screen start
        let blockRowLocation = (location / 512) * 512;
        //finds the distance from the row beginning to the real location
        let distanceFromRowBlockBeginning = location - blockRowLocation;
        //the block col is the distance from the last subrow to the location
        let blockCol = MathPlus.modulu(distanceFromRowBlockBeginning, 32);
        
        return blockRowLocation + blockCol;
    }

    function int getPixelsInBlock(int location)
    {
		var int blockRowLocation;
		var int distanceFromRowBlockBeginning;
		var int pixelsInBlock;

        //finds the row by checking how many rows the block is from screen start
        let blockRowLocation = (location / 512) * 512;
        //finds the distance from the row beginning to the real location
        let distanceFromRowBlockBeginning = location - blockRowLocation;
        //how many subrows withing the block row is the location
        let pixelsInBlock = 32 - distanceFromRowBlockBeginning / 32;

        return pixelsInBlock;
    }
}
